{
  "title": "Módulo 4: El Poder de JavaScript - Lógica y Dinamismo Web",
  "intro": "Después de construir la estructura con HTML y darle estilo con CSS, es hora de dotar a tus páginas web de inteligencia y capacidad de respuesta. **JavaScript es el lenguaje de programación que te permite añadir interactividad**, manipular el contenido, comunicarte con servidores y hacer que tus sitios web cobren vida, transformándolos de documentos estáticos en experiencias dinámicas.",
  "topics": [
    "¿Qué es JavaScript y por qué es esencial?",
    "Cómo enlazar JavaScript a tu HTML (en el navegador y Node.js)",
    "Variables y Tipos de Datos Fundamentales (Números, Cadenas, Booleanos, etc.)",
    "Operadores: Aritméticos, de Comparación y Lógicos",
    "Funciones: Reutilización de Código y Modularidad",
    "Estructuras de Control: Condicionales (if/else, switch) y Bucles (for, while)",
    "Interacción con el DOM: Manipulando HTML y CSS con JavaScript",
    "Manejo de Eventos: Respondiendo a las Acciones del Usuario",
    "Debugging: Identificando y Resolviendo Errores Comunes"
  ],
  "lesson": {
    "title": "Lección 4: Introducción a JavaScript - Haciendo la Web Interactiva",
    "objectives": [
      "Entender el rol de JavaScript en el desarrollo web moderno y sus capacidades.",
      "Aprender las diferentes formas de integrar JavaScript en un documento HTML.",
      "Definir y utilizar variables para almacenar diferentes tipos de datos.",
      "Realizar operaciones básicas con operadores aritméticos, de comparación y lógicos.",
      "Crear y llamar funciones para organizar y reutilizar bloques de código.",
      "Implementar estructuras condicionales para tomar decisiones lógicas en el código.",
      "Utilizar bucles para ejecutar bloques de código repetidamente.",
      "Interactuar con los elementos HTML (DOM) para cambiar contenido, atributos y estilos.",
      "Manejar eventos para responder a las acciones de los usuarios (clics, teclado, etc.).",
      "Desarrollar habilidades básicas de depuración para identificar y corregir errores en el código JavaScript."
    ],
    "content": "<h3 class=\"text-2xl font-bold text-white mt-8 mb-4\">Dando Vida a tus Páginas Web con JavaScript</h3><p class=\"text-slate-300 mb-4\">Hemos aprendido a estructurar el contenido con HTML y a estilizarlo con CSS. Ahora, con **JavaScript (JS)**, vamos a darle inteligencia y dinamismo. Piensa en JS como el 'cerebro' de tu página web. Es el lenguaje que permite que un botón responda a un clic, que una imagen cambie al pasar el mouse, que los formularios validen la información, o que se carguen nuevos datos sin recargar la página completa. JavaScript es el motor de la interactividad en la web.</p><hr class=\"border-slate-700 my-6\"/><h4 class=\"text-xl font-bold text-white mt-8 mb-4\">1. ¿Qué es JavaScript y Dónde se Ejecuta?</h4><p class=\"text-slate-300 mb-4\">JavaScript es un **lenguaje de programación de alto nivel, interpretado y multiparadigma** (soporta programación orientada a objetos, funcional e imperativa). Originalmente creado para ejecutarse en el navegador del cliente (frontend), su alcance ha crecido exponencialmente. Gracias a entornos como **Node.js**, ahora JavaScript también se usa para construir servidores (backend), aplicaciones de escritorio y móviles, e incluso para controlar hardware.</p><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">¿Cómo Enlazar JavaScript a tu HTML?</h5><p class=\"text-slate-300 mb-4\">Para que el navegador ejecute tu código JavaScript, debes incluirlo en tu archivo HTML. Las formas más comunes son:</p><ol class=\"list-decimal list-inside space-y-2 text-slate-300\"><li><strong>En línea (Inline):</strong> Directamente en la etiqueta HTML con el atributo `onclick`, `onmouseover`, etc. **No recomendado para código complejo** por cuestiones de limpieza y separación de intereses. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>&lt;button onclick=\"alert('¡Clicaste el botón!')\"&gt;Haz clic&lt;/button&gt;</code></pre></div></li><li><strong>Interno (Internal):</strong> Dentro de la etiqueta `<script>` en el `&lt;head&gt;` o, **preferiblemente, justo antes del cierre de la etiqueta `&lt;body&gt;`**. Colocarlo al final del `&lt;body&gt;` asegura que todo el HTML ya esté cargado antes de que JavaScript intente interactuar con él. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>&lt;body&gt;\n  &lt;!-- Tu contenido HTML --&gt;\n  &lt;script&gt;\n    console.log(\"¡Hola desde un script interno!\");\n  &lt;/script&gt;\n&lt;/body&gt;</code></pre></div></li><li><strong>Externo (External):</strong> **La mejor práctica y la más usada.** El código JavaScript se escribe en un archivo separado (`.js`) y se enlaza al HTML usando la etiqueta `<script src=\"tu_script.js\"></script>`. Esto mantiene tu HTML limpio y tu código JavaScript organizado y reutilizable. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>&lt;body&gt;\n  &lt;!-- Tu contenido HTML --&gt;\n  &lt;script src=\"./scripts/app.js\"&gt;&lt;/script&gt; &lt;!-- Ruta a tu archivo JS --&gt;\n&lt;/body&gt;</code></pre></div></li></ol><hr class=\"border-slate-700 my-6\"/><h4 class=\"text-xl font-bold text-white mt-8 mb-4\">2. Variables y Tipos de Datos: Almacenando Información</h4><p class=\"text-slate-300 mb-4\">Las **variables** son contenedores con nombre que utilizamos para almacenar datos en un programa. Piensa en ellas como cajas etiquetadas donde guardas diferentes tipos de información que tu programa necesitará usar o modificar. En JavaScript, declaramos variables usando `let`, `const`, o `var` (aunque `var` es menos común hoy en día).</p><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Declaración de Variables:</h5><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li><code>let</code>: Para variables cuyo valor puede **cambiar** (re-asignarse). Es la más usada.</li><li><code>const</code>: Para variables cuyo valor **no cambiará** (constantes). Si intentas re-asignar una `const`, JavaScript te dará un error. ¡Usa `const` siempre que sepas que el valor no cambiará!</li></ul><div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let nombreUsuario = \"Alicia\"; // Variable que puede cambiar\nnombreUsuario = \"Pedro\";     // Valor re-asignado\n\nconst PI = 3.14159;       // Constante, su valor no puede cambiar\n// PI = 3.14;             // Esto causaría un error!\n\nlet edad = 30;\nlet esEstudiante = true;</code></pre></div><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Tipos de Datos Primitivos Comunes:</h5><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>**String (Cadenas de Texto):** Secuencias de caracteres, como palabras o frases. Se encierran entre comillas dobles (`\"\"`) o simples (`''`). <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let saludo = \"¡Hola, mundo!\";\nconst mensajeError = 'Hubo un problema.';</code></pre></div></li><li>**Number (Números):** Representan valores numéricos, enteros o decimales. No llevan comillas. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let cantidad = 100;\nconst precioUnitario = 19.99;</code></pre></div></li><li>**Boolean (Booleanos):** Representan un valor de verdad: `true` (verdadero) o `false` (falso). Son fundamentales para la lógica condicional. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let estaLogueado = false;\nconst esMayorDeEdad = true;</code></pre></div></li><li>**Null:** Representa la ausencia intencional de cualquier valor o un valor desconocido.</li><li>**Undefined:** Indica que una variable ha sido declarada pero aún no se le ha asignado un valor.</li></ul><hr class=\"border-slate-700 my-6\"/><h4 class=\"text-xl font-bold text-white mt-8 mb-4\">3. Operadores: Manipulando Datos</h4><p class=\"text-slate-300 mb-4\">Los operadores son símbolos especiales que realizan operaciones sobre uno o más valores (operandos) y producen un resultado. Son la base de cualquier cálculo o comparación en tu código.</p><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Tipos de Operadores Comunes:</h5><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>**Aritméticos:** Realizan operaciones matemáticas básicas. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let suma = 5 + 3;    // 8 (Suma)\nlet resta = 10 - 4;  // 6 (Resta)\nlet producto = 6 * 7; // 42 (Multiplicación)\nlet division = 20 / 5; // 4 (División)\nlet modulo = 10 % 3; // 1 (Resto de la división)</code></pre></div></li><li>**De Asignación:** Asignan un valor a una variable. El más común es `=`. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let x = 10;\nx += 5; // Equivalente a x = x + 5; (x es ahora 15)</code></pre></div></li><li>**De Comparación:** Comparan dos valores y devuelven un booleano (`true` o `false`). <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>console.log(5 == '5');  // true (Igualdad solo de valor)\nconsole.log(5 === '5'); // false (Igualdad de valor Y tipo, ¡preferir este!)\nconsole.log(10 > 5);   // true (Mayor que)\nconsole.log(3 <= 3);   // true (Menor o igual que)</code></pre></div></li><li>**Lógicos:** Combinan o modifican expresiones booleanas. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let a = true;\nlet b = false;\n\nconsole.log(a && b); // false (AND lógico: true si AMBOS son true)\nconsole.log(a || b); // true (OR lógico: true si AL MENOS UNO es true)\nconsole.log(!a);    // false (NOT lógico: invierte el valor booleano)</code></pre></div></li></ul><hr class=\"border-slate-700 my-6\"/><h4 class=\"text-xl font-bold text-white mt-8 mb-4\">4. Funciones: Bloques de Código Reutilizables</h4><p class=\"text-slate-300 mb-4\">Una **función** es un bloque de código diseñado para realizar una tarea específica. Las funciones te permiten organizar tu código, evitar la repetición (Principio DRY: Don't Repeat Yourself) y hacerlo más fácil de mantener y depurar.</p><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Declaración y Llamada a Funciones:</h5><div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>// Declaración de una función básica\nfunction saludar() {\n  console.log(\"¡Hola a todos!\");\n}\n\nsaludar(); // Llamada a la función: ¡ejecuta el código dentro de ella!\n\n// Función con parámetros (datos de entrada)\nfunction sumar(num1, num2) {\n  let resultado = num1 + num2;\n  return resultado; // 'return' devuelve un valor fuera de la función\n}\n\nlet miSuma = sumar(10, 5); // Llamada a la función con argumentos 10 y 5\nconsole.log(miSuma);     // Salida: 15\n\n// Ejemplo de función flecha (Arrow Function - forma moderna y concisa)\nconst multiplicar = (a, b) => a * b;\nconsole.log(multiplicar(4, 2)); // Salida: 8</code></pre></div><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>Los **paréntesis `()`** después del nombre de la función se usan para pasar **parámetros** (valores de entrada) a la función. Si no hay parámetros, se dejan vacíos.</li><li>Las **llaves `{}`** encierran el **cuerpo de la función**, es decir, las instrucciones que se ejecutarán cuando la función sea llamada.</li><li>La palabra clave `return` se usa para especificar el valor que la función debe devolver. Si una función no tiene `return` explícito, devuelve `undefined`.</li></ul><hr class=\"border-slate-700 my-6\"/><h4 class=\"text-xl font-bold text-white mt-8 mb-4\">5. Estructuras de Control: Condicionales y Bucles</h4><p class=\"text-slate-300 mb-4\">Las estructuras de control son la espina dorsal de la lógica de programación. Te permiten tomar decisiones y repetir acciones, haciendo que tu programa sea dinámico y capaz de manejar diferentes escenarios.</p><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Condicionales (Decisiones):</h5><p class=\"text-slate-300 mb-4\">Los condicionales ejecutan un bloque de código solo si una condición específica es verdadera.</p><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>**`if` / `else if` / `else`:** <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let temperatura = 25;\n\nif (temperatura > 30) {\n  console.log(\"¡Hace mucho calor!\");\n} else if (temperatura > 20) {\n  console.log(\"La temperatura es agradable.\");\n} else {\n  console.log(\"Hace frío.\");\n}</code></pre></div></li><li>**`switch`:** Una alternativa a múltiples `if...else if` cuando tienes muchas opciones basadas en un solo valor. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let dia = \"Lunes\";\n\nswitch (dia) {\n  case \"Lunes\":\n    console.log(\"Inicio de semana.\");\n    break;\n  case \"Viernes\":\n    console.log(\"¡Casi fin de semana!\");\n    break;\n  default:\n    console.log(\"Día normal.\");\n}\n</code></pre></div></li></ul><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Bucles (Repeticiones):</h5><p class=\"text-slate-300 mb-4\">Los bucles repiten un bloque de código un número determinado de veces o mientras una condición sea verdadera.</p><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>**`for` loop:** Ideal para cuando sabes cuántas veces quieres repetir algo. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>for (let i = 0; i < 5; i++) { // Inicialización; Condición; Incremento\n  console.log(\"Contando: \" + i);\n}\n// Salida: Contando: 0, Contando: 1, ..., Contando: 4</code></pre></div></li><li>**`while` loop:** Repite un bloque de código mientras una condición sea verdadera. ¡Cuidado con los bucles infinitos! <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>let contador = 0;\nwhile (contador < 3) {\n  console.log(\"Repetición: \" + contador);\n  contador++; // ¡Importante para evitar bucles infinitos!\n}\n// Salida: Repetición: 0, Repetición: 1, Repetición: 2</code></pre></div></li></ul><hr class=\"border-slate-700 my-6\"/><h4 class=\"text-xl font-bold text-white mt-8 mb-4\">6. Interacción con el DOM y Manejo de Eventos: El Corazón de la Interactividad</h4><p class=\"text-slate-300 mb-4\">El **DOM (Document Object Model)** es una representación en memoria de tu documento HTML. JavaScript puede interactuar con el DOM para acceder, modificar y añadir elementos HTML y sus estilos CSS. Los **eventos** son las acciones que ocurren en el navegador (clics, pulsaciones de teclas, carga de página, etc.) a las que JavaScript puede 'escuchar' y responder.</p><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Ejemplo: Cambiando Contenido y Respondiendo a un Clic:</h5><div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>&lt;!-- En tu HTML, añade esto: --&gt;\n&lt;h2 id=\"titulo\"&gt;Haz clic en el botón&lt;/h2&gt;\n&lt;button id=\"miBoton\"&gt;Cambiar Título&lt;/button&gt;\n\n&lt;!-- En tu archivo JavaScript (app.js): --&gt;\n\n// 1. Obtener una referencia al elemento HTML por su ID\nconst miTitulo = document.getElementById('titulo');\nconst botonCambiar = document.getElementById('miBoton');\n\n// 2. Añadir un 'escuchador de eventos' al botón\nbotonCambiar.addEventListener('click', function() {\n  // Cuando se haga clic, cambia el texto del título\n  miTitulo.textContent = '¡El título ha cambiado con JavaScript!';\n  miTitulo.style.color = '#2dd4bf'; // También podemos cambiar estilos\n});\n\n// Podemos también añadir clases CSS\n// miTitulo.classList.add('clase-nueva');</code></pre></div><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>`document.getElementById('id-del-elemento')`: Es una forma muy común de seleccionar un elemento HTML por su atributo `id`.</li><li>`addEventListener('evento', funcion)`: Permite 'escuchar' un tipo de evento (`'click'`, `'mouseover'`, `'keydown'`) en un elemento y ejecutar una función cuando ese evento ocurre.</li><li>`textContent`, `innerHTML`, `style`, `classList`: Son propiedades y métodos que te permiten manipular el contenido, los estilos o las clases CSS de los elementos HTML seleccionados.</li></ul><hr class=\"border-slate-700 my-6\"/><h4 class=\"text-xl font-bold text-white mt-8 mb-4\">7. Errores Comunes y Estrategias de Depuración (Debugging)</h4><p class=\"text-slate-300 mb-4\">Como programador, pasarás mucho tiempo resolviendo errores (¡es parte del trabajo y te hace mejor!). No te frustres; es una habilidad fundamental. JavaScript, al ser interpretado, a menudo te dará 'pistas' en la consola del navegador.</p><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Herramientas del Navegador:</h5><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>**Consola del Navegador (Developer Tools):** Presiona `F12` (o `Ctrl + Shift + I` / `Cmd + Option + I` en Mac) en tu navegador y ve a la pestaña 'Console'. Aquí verás mensajes de error, advertencias y la salida de `console.log()`. <div class=\"lesson-code-block\"><pre class=\"font-mono text-sm text-cyan-300\"><code>console.log(\"¡Hola desde la consola!\"); // Imprime un mensaje en la consola\nconsole.warn(\"Esto es una advertencia.\");\nconsole.error(\"¡Ha ocurrido un error grave!\");</code></pre></div></li><li>**Pestaña 'Sources' (Fuentes):** Te permite establecer 'puntos de interrupción' (breakpoints) en tu código para pausar la ejecución y examinar el estado de las variables línea por línea. ¡Es tu mejor amigo para depurar!</li></ul><h5 class=\"text-lg font-semibold text-white mt-4 mb-2\">Estrategias de Depuración:</h5><ul class=\"list-disc list-inside space-y-2 text-slate-300\"><li>**Lee el Mensaje de Error:** La consola te dirá el tipo de error (ej. `ReferenceError`, `TypeError`), el archivo y la línea donde ocurrió. ¡Es tu primera pista!</li><li>**`console.log()`:** Es tu herramienta más básica y poderosa. Úsala para imprimir el valor de variables en diferentes puntos de tu código y ver cómo fluye la información.</li><li>**Aísla el Problema:** Comenta temporalmente secciones de código para ver si el error desaparece, lo que te ayudará a identificar la parte problemática.</li><li>**Divide y Conquista:** Si tu función es compleja, sepárala en partes más pequeñas y prueba cada una de forma aislada.</li><li>**Google y Stack Overflow:** Si no entiendes un error, cópialo y pégalo en Google. Lo más probable es que alguien más ya haya tenido el mismo problema y haya una solución en Stack Overflow.</li><li>**No te Frustres:** Depurar es una habilidad. Sé paciente, metódico y celebra cada error que resuelvas. ¡Cada error es una oportunidad de aprender!</li></ul>"
  }
}